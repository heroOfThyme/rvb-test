---
import type { ItemGrid as Props } from "~/types";
import { Icon } from "astro-icon/components";
import { twMerge } from "tailwind-merge";
import Button from "./Button.astro";
import Image from "astro/components/Image.astro";

const {
  items = [],
  columns,
  defaultIcon = "",
  classes = {},
} = Astro.props;

const {
  container: containerClass = "",
  // container: containerClass = "sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3",
  container2: container2Class ='',
  panel: panelClass = "",
  title: titleClass = "",
  description: descriptionClass = "",
  icon: defaultIconClass = "text-primary",
  
} = classes;
---

{
  items && (
    <div
      class={twMerge(
        `grid gap-8 gap-x-12 sm:gap-y-8 ${
          columns === 4
            ? "lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2"
            : columns === 3
            ? "lg:grid-cols-3 sm:grid-cols-2"
            : columns === 2
            ? "sm:grid-cols-2 "
            : ""
        }`,
        containerClass
      )}
    >
      {items.map(
        ({
          title,
          description,
          callToAction,
          classes: itemClasses = {},
          image: image = {},
        }) => (
            <div class={twMerge(
                  "",
                  container2Class,
                  itemClasses?.container2
                )}
            >
            <div
              class={twMerge(
                "place-content-end h-full text-white  z-20",
                panelClass,
                itemClasses?.panel
              )}
            >
              <div
                class={twMerge(
                  "text-3xl font-bold z-20",
                  titleClass,
                  itemClasses?.title
                )}
              >
                {title}
              </div>
              {description && (
                <p
                  class={twMerge(
                    "text-muted mt-2 z-20",
                    descriptionClass,
                    itemClasses?.description
                  )}
                  set:html={description}
                />
              )}
              {callToAction && (
                <div class="mt-2 z-20">
                  <Button {...callToAction} />
                </div>
              )}
            </div>
          </div>  
        )
      )}
    </div>
    )
  }