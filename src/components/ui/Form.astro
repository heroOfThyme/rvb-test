---
import type { Form as Props } from '~/types';
import Button from '~/components/ui/Button.astro';

const { inputs, textarea, disclaimer, button = 'Contact us', description = '' } = Astro.props;

const topics = [
  {value: 'web-dev', label: 'Web Development'},
  {value: 'web-host', label: 'Web Hosting'},
  {value: 'web-seo', label: 'Search Engine Optimization'},
  {value: 'business-auto', label: 'Business Process Automation'},
  {value: 'google-management', label: 'Google Business Management'},
  {value: 'other', label: 'Other'},
];

if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    const name = data.get("username");
    const email = data.get("email");
    const password = data.get("password");
    // Do something with the data
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}


---

<form method="POST">
  {
    inputs &&
      inputs.map(
        ({ type = 'text', name, label = '', autocomplete = 'on', placeholder = '', required }) =>
          name && (
            <div class="mb-6">
              {label && (
                <label for={name} class="block text-sm font-medium">
                  {label}{required ? ' *' : ''}
                </label>
              )}
              <input
                type={type}
                name={name}
                id={name}
                autocomplete={autocomplete}
                placeholder={placeholder}
                required={required}
                class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-primary bg-white dark:bg-transparent caret-primary"
              />
              <div class="validation-message" style="color: red;"> </div>
            </div>
          )
      )
  }

{
  topics && (
    <div class="mb-6">
      <label for="topics" class="block text-sm font-medium">
        Topic *
      </label>
      <select
        id="topics"
        name="topics"
        required
        class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-primary bg-white dark:bg-transparent"
      >
        <option value="" disabled selected>Select a topic</option>
        {topics.map(({ value, label }) => (
          <option value={value}>{label}</option>
        ))}
      </select>
    </div>
  )
}

  {
    textarea && (
      <div>
        <label for="textarea" class="block text-sm font-medium caret-primary">
          {textarea.label}{textarea.required ? ' *' : ''}
        </label>
        <textarea
          id="textarea"
          name={textarea.name ? textarea.name : 'message'}
          rows={textarea.rows ? textarea.rows : 4}
          placeholder={textarea.placeholder}
          required={textarea.required}
          class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-primary bg-white dark:bg-transparent"
        />
      </div>
    )
  }

  {
    disclaimer && (
      <div class="mt-3 flex items-start">
        <div class="flex mt-0.5">
          <input
            id="disclaimer"
            name="disclaimer"
            type="checkbox"
            class="cursor-pointer mt-1 py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-primary bg-white dark:bg-transparent"
          />
        </div>
        <div class="ml-3">
          <label for="disclaimer" class="cursor-pointer select-none text-sm text-gray-600 dark:text-gray-400">
            {disclaimer.label}
          </label>
        </div>
      </div>
    )
  }

  {
    button && (
      <div class="mt-10 grid">
        <Button variant="primary" type="submit">
          {button}
        </Button>
      </div>
    )
  }

  {
    description && (
      <div class="mt-3 text-center">
        <p class="text-sm text-gray-600 dark:text-gray-400">{description}</p>
      </div>
    )
  }
</form>

<script>
  document.addEventListener('DOMContentLoaded', (event) => {
    const form = document.querySelector('form') as HTMLFormElement;
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(form);
      // Optionally convert formData to a JSON object
      const plainFormData = Object.fromEntries(formData.entries());
      const formDataJsonString = JSON.stringify(plainFormData);

      try {
        const response = await fetch('/send-email', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: formDataJsonString,
        });

        if (response.ok) {
          console.log('Email sent successfully');
          // Handle success response
        } else {
          console.error('Failed to send email');
          // Handle error response
        }
      } catch (error) {
        console.error('Error sending email', error);
      }
    });
  });
</script>