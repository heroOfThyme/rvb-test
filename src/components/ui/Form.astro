---
import type { Form as Props } from '~/types';
import Button from '~/components/ui/Button.astro';

const { inputs, textarea, disclaimer, button = 'Submit', description = '' } = Astro.props;

const topics = [
  {value: 'web-dev', label: 'Web Development'},
  {value: 'web-host', label: 'Web Hosting'},
  {value: 'web-seo', label: 'Search Engine Optimization'},
  {value: 'business-auto', label: 'Business Process Automation'},
  {value: 'google-management', label: 'Google Business Management'},
  {value: 'other', label: 'Other'},
];
---

<form 
    action="https://api.web3forms.com/submit" 
    method="POST" 
    id="form"
    class="needs-validation"
    data-astro-reload
    novalidate>
  <input type="hidden" name="access_key" value="90fa869f-f7e1-4e5d-a378-56fb20cd260d">

  {
    inputs &&
      inputs.map(
        ({ type = 'text', name, label = '', autocomplete = 'on', placeholder = '', required }) =>
          name && (
            <div class="mb-6">
              {label && (
                <label for={name} class="block text-sm font-medium">
                  {label}{required ? ' *' : ''}
                </label>
              )}
              <input
                type={type}
                name={name}
                id={name}
                autocomplete={autocomplete}
                placeholder={placeholder}
                required={required}
                class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-primary bg-white dark:bg-transparent caret-primary"
              />
                <div class="empty-feedback invalid-feedback text-red-400 text-sm mt-3"> Please provide your information.</div>
            </div>
          )
      )
  }
  <input type="checkbox" name="botcheck" class="hidden" style="display: none;">

  {
    topics && (
      <div class="mb-6">
        <label for="topics" class="block text-sm font-medium">
          Topic *
        </label>
        <select
          id="topics"
          name="topics"
          required
          class="py-3 px-4 block w-full text-md rounded-lg border dark:border-primary dark:bg-transparent"
        >
          <option value="" disabled selected>Select a topic</option>
          {topics.map(({ value, label }) => (
            <option value={value}>{label}</option>
          ))}
        </select>
        <div class="empty-feedback invalid-feedback text-red-400 text-sm mt-3">Please select a topic.</div>
      </div>
    )
  }

  {
    textarea && (
      <div>
        <label for="textarea" class="block text-sm font-medium caret-primary">
          {textarea.label}{textarea.required ? ' *' : ''}
        </label>
        <textarea
          id="textarea"
          name={textarea.name ? textarea.name : 'message'}
          rows={textarea.rows ? textarea.rows : 4}
          placeholder={textarea.placeholder}
          required
          class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-primary bg-white dark:bg-transparent"
        />
        <div class="empty-feedback invalid-feedback text-red-400 text-sm mt-3">Please enter a description.</div>
      </div>
    )
  }

  <div class="h-captcha mt-8"
  data-captcha="true"
  data-theme="dark"
  data-size="normal"
  ></div>

  {
    button && (
      <div class="mt-10 grid">
        <Button variant="secondary" type="submit" icon='tabler:mail-heart'>
          {button}
        </Button>
      </div>
    )
  }

  {
    description && (
      <div class="mt-3 text-center">
        <p class="text-sm text-gray-600 dark:text-gray-400">{description}</p>
      </div>
    )
  }

<div id="result" class="mt-3 text-center"></div>
</form>

<style>
  .invalid-feedback,
  .empty-feedback {
    display: none;
  }

  .was-validated :placeholder-shown:invalid ~ .empty-feedback {
    display: block;
  }

  .was-validated :not(:placeholder-shown):invalid ~ .invalid-feedback {
    display: block;
  }

  .is-invalid,
  .was-validated :invalid {
    border-color: #dc3545;
  }
</style>

<script is:inline>

(function () {
    "use strict";
    /*
    * Form Validation
    */

    // Fetch all the forms we want to apply custom validation styles to
    const forms = document.querySelectorAll(".needs-validation");
    const result = document.getElementById("result");
    // Loop over them and prevent submission
    Array.prototype.slice.call(forms).forEach(function (form) {
      form.addEventListener(
        "submit",
        function (event) {
          if (!form.checkValidity()) {
            event.preventDefault();
            event.stopPropagation();

            form.querySelectorAll(":invalid")[0].focus();
          } else {
            /*
            * Form Submission using fetch()
            */
            event.preventDefault();
            event.stopPropagation();
            
            const formData = new FormData(form);
            const object = Object.fromEntries(formData);
            const json = JSON.stringify(object);
            result.innerHTML = "Please wait...";

            fetch("https://api.web3forms.com/submit", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                Accept: "application/json",
              },
              body: json,
            })
              .then(async (response) => {
                let json = await response.json();
                if (response.status == 200) {
                  result.innerHTML = json.message;
                  result.classList.remove("text-gray-500");
                  result.classList.add("text-green-500");
                } else {
                  console.log(response);
                  result.innerHTML = json.message;
                  result.classList.remove("text-gray-500");
                  result.classList.add("text-red-500");
                }
              })
              .catch((error) => {
                console.log(error);
                result.innerHTML = "Something went wrong!";
              })
              .then(function () {
                form.reset();
                form.classList.remove("was-validated");
                setTimeout(() => {
                  result.style.display = "none";
                }, 5000);
              });
          }
          form.classList.add("was-validated");
        },
        false
      );
    });
  })();
</script>

<script src="https://web3forms.com/client/script.js" async defer></script>